* 2019.05.01
    - Use `cdict` instead of `dot` to measure the distance between vgg/resnet/densenet vector
    - A litter better result, but still not good
* 2019.04.30
    - Try to distinguish person w/o skis/snowboard by distance
    - Failed because the distance distribution is not bimodal
* 2019.04.29
    - Set a new goal
* 2019.04.27
    - Extract feature from bulk boxes
    - Using my image as input vector
    - Still not work well
* 2019.04.26
    - Update Tools `Show_Img`
    - Test Query on random choice
> Not working when use vgg/resnet/densenet vector (w/o L1 norm) to query.
> It seems body-shape/pose take dominant contribution than clothes/color.
> It works better in small datasets, maybe because it can't find similar body-shape/pose with limited images.

---

* 2019.04.24
    - Extract feature from bulk masks
* 2019.04.23
    - Separate bulk run files
    - Datetime analysis
* 2019.04.22
    - Wanlong images processing (Finish)
    - Merge Mask R-CNN results
* 2019.04.20
    - Wanlong images processing (Start)
* 2019.04.19
    - Keep working on GPU
    - Switch to bulk pipeline
    - Add query pipeline
    - Start building tools
* 2019.04.17
    - Keep working on GPU
    - Add Tips for GPU
        - BATCH_SIZE -> IMAGES_PER_GPU
    - Add VGG and DenseNet
* 2019.04.16
    - Start downloading bulk images from @MingxuanHu
    - Start coding on GPU node
    - Tips for GPU
        - Make sure tensorflow-gpu was installed
        - Watching GPU memory
* 2019.04.15
    - Add Tags and emoji
* 2019.04.14
    - Cleanup DR and Clustering Code & Notebook
    - Upload Code
* 2019.04.13
    - Visualize tSNE clusters
        - #TAG-ignore
        - only got 8 clusters
        - two of them are belong to one cluster
        - one of them are mixed with two but similar skiers
        - one of them is not clustered by skiers clothes
    - Rank person
        - #TAG-ignore
        - rank_ID = np.argsort(np.dot(inputV, dataV.T))[::-1]
        - Acceptable result
        - Reference: https://github.com/willard-yuan/flask-keras-cnn-image-retrieval.git
* 2019.04.12
    - Use ResNet50 extract feature of InBox Pixels
    - Use PCA, tSNE, UMAP to DR and visualize results
    - Visualize UMAP cluster InBox Pixels and row images
    - Add Images for BoxSize Distribution and Dimensionality Reduction
* 2019.04.11
    - Add v0.0 tag message
    - Rephrasing, Add some explanations, Add emoji
    - Invite Collaborators
* 2019.04.10
    - Change cutoff
    - Add scores violinplot
    - Add InBox Pixels Heatmap
    - Upload analysis code
* 2019.04.09
    - Update image for result analysis
    - Messed up masks shape ...
    - Re-run Mask_RCNN
* 2019.04.08
    - Save Mask_RCNN outputs for image datasets (`pw_20190331_wl_n1`)
        - Pandas v0.23 -> v0.24
    - @MingxuanHu sent me his scraping results (more than 6G...)
    - Update imgs
    - Analysis Mask_RCNN outputs
    - Add and Update TODO, Add TAG-HEAD
* 2019.04.04
    - Setup Mask_RCNN
    - Test Mask_RCNN on demo and real data
    - Get URLs for images
    - Start Download images
* 2019.04.03
    - Test API to get image
    - Meet with @MingxuanHu, tell him about API
* 2019.04.02
    - Add images
    - Rephrasing
    - Creat .gitignore
    - Creat log
    - Add link
    - Get some imgs into `SnapData` (ignore)
    - Look at Mask R-CNN, try to deploy it
* 2019.04.01
    - Creat repo
    - Creat README.md
    - Commit `intro.`, `Outline`
